#!/bin/sh

# configure script from SimpleInitGen.

echo "[ Getting Ready ]"
echo
echo -n "Deleting old makefile or makefile.notready file..."
if [ -f ./Makefile ]; then
	rm -f ./Makefile
	echo "ok."
elif [ -f ./Makefile.notready ]; then
	rm -f ./Makefile.notready
	echo "ok."
else
	echo "files dont exist."
fi
echo -n "Deleting old init.c..."
if [ -f init.c ]; then
	rm -f init.c
	echo "ok."
else
	echo "file dosent exist."
fi
echo -n "checking if GCC is installed..."
if [ -f /usr/bin/gcc ]; then
	echo "ok."
else
	echo "no."
	echo "You must install GCC to compile!"
	echo "Install it by typing: sudo apt install gcc"
	exit 1
fi
echo -n "checking if Make is installed..."
if [ -f /usr/bin/make ]; then
	echo "ok."
else
	echo "no."
	echo "You must install Make to compile!"
	echo "Install it by typing: sudo apt install make"
	exit 1
fi
echo -n "checking if strip (from binutils) is installed..."
if [ -f /usr/bin/strip ]; then
	echo "ok."
else
	echo "no."
	echo "You must install binutils to compile!"
	echo "Install it by typing: sudo apt install binutils"
	exit 1
fi
echo
echo "[ Options ]"
echo
read -p "Mount /dev? (Y/N): " mount_dev
if [ "$mount_dev" = "Y" ] || [ "$mount_dev" = "y" ]; then
	MOUNTDEV=1
elif [ "$mount_dev" = "N" ] || [ "$mount_dev" = "n" ]; then
	MOUNTDEV=0
else
	echo "Invalid answer! Quitting..."
	exit 1
fi
read -p "Mount /proc? (Y/N): " mount_proc
if [ "$mount_proc" = "Y" ] || [ "$mount_proc" = "y" ]; then
	MOUNTPROC=1
elif [ "$mount_proc" = "N" ] || [ "$mount_proc" = "n" ]; then
	MOUNTPROC=0
else
	echo "Invalid answer! Quitting..."
	exit 1
fi
read -p "Mount /sys? (Y/N): " mount_sys
if [ "$mount_sys" = "Y" ] || [ "$mount_sys" = "y" ]; then
	MOUNTSYS=1
elif [ "$mount_sys" = "N" ] || [ "$mount_sys" = "n" ]; then
	MOUNTSYS=0
else
	echo "Invalid answer! Quitting..."
	exit 1
fi
read -p "Mount /tmp? (Y/N): " mount_tmp
if [ "$mount_tmp" = "Y" ] || [ "$mount_tmp" = "y" ]; then
	MOUNTTMP=1
elif [ "$mount_tmp" = "N" ] || [ "$mount_tmp" = "n" ]; then
	MOUNTTMP=0
else
	echo "Invalid answer! Quitting..."
	exit 1
fi
read -p "Run daemons/services in /etc/init.rc (if exists)? (Y/N): " run_ds
if [ "$run_ds" = "Y" ] || [ "$run_ds" = "y" ]; then
	RUNDAS=1
elif [ "$run_ds" = "N" ] || [ "$run_ds" = "n" ]; then
	RUNDAS=0
else
	echo "Invalid answer! Quitting..."
	exit 1
fi
read -p "Launch shell? (Y/N): " launch_shell
if [ "$launch_shell" = "Y" ] || [ "$launch_shell" = "y" ]; then
	LAUNCHSHELL=1
	read -p "   Enter shell path: " shell_path
	if [ -n "$shell_path" ]; then
		SHELLPATH=$shell_path
	else
		echo "Invalid answer! Quitting..."
		exit 1
	fi
	read -p "   Launch shell automatically when exited? (Y/N): " auto_launch
	if [ "$auto_launch" = "Y" ] || [ "$auto_launch" = "y" ]; then
		AUTOLAUNCH=1
	elif [ "$auto_launch" = "N" ] || [ "$auto_launch" = "n" ]; then
		AUTOLAUNCH=0
	else
		echo "Invalid answer! Quitting..."
		exit 1
	fi
elif [ "$launch_shell" = "N" ] || [ "$launch_shell" = "n" ]; then
	LAUNCHSHELL=0
else
	echo "Invalid answer! Quitting..."
	exit 1
fi
read -p "Print verbose messages? (Y/N): " verbose
if [ "$verbose" = "Y" ] || [ "$verbose" = "y" ]; then
	VERBOSEMSG=1
elif [ "$verbose" = "N" ] || [ "$verbose" = "n" ]; then
	VERBOSEMSG=0
else
	echo "Invalid answer! Quitting..."
	exit 1
fi
echo
echo "[ Creating Files ]"
echo
echo "Creating Makefile..."
echo "# Generated by SimpleInitGen." >> Makefile.notready
echo "CFLAGS = -static" >> Makefile.notready
echo "all: compile" >> Makefile.notready
echo "compile:" >> Makefile.notready
echo '	@echo "Compiling..."' >> Makefile.notready
echo '	@gcc $(CFLAGS) -o init init.c' >> Makefile.notready
echo '	@echo "Stripping for smaller file size..."' >> Makefile.notready
echo '	@strip init' >> Makefile.notready
echo '	@echo "Done, thanks for using SimpleInitGen!"' >> Makefile.notready
echo "clean:" >> Makefile.notready
echo '	@echo "Cleaning..."' >> Makefile.notready
echo '	@rm -f init' >> Makefile.notready
echo '	@echo "Cleaned, thanks for using SimpleInitGen!"' >> Makefile.notready
mv Makefile.notready Makefile
echo "Creating init.c..."
echo "// Generated by SimpleInitGen." >> init.c
echo "#include <stdio.h>" >> init.c
echo "#include <stdlib.h>" >> init.c
echo "#include <unistd.h>" >> init.c
if [ "$MOUNTDEV" = 1 ] || [ "$MOUNTPROC" = 1 ] || [ "$MOUNTSYS" = 1 ] || [ "$MOUNTTMP" = 1 ]; then
	echo "#include <sys/mount.h>" >> init.c
fi
echo "#include <sys/types.h>" >> init.c
echo "#include <sys/wait.h>" >> init.c
if [ "$RUNDAS" = 1 ]; then
	cat >> init.c <<'EOF'
#include <string.h>
#include <errno.h>
EOF
fi
echo "" >> init.c
echo "int ret;" >> init.c
echo "" >> init.c
if [ "$RUNDAS" = 1 ]; then
	echo "int run_services(void) {" >> init.c
	echo '	FILE *fp = fopen("/etc/init.rc", "r");' >> init.c
	echo "	if (!fp) {" >> init.c
	if [ "$VERBOSEMSG" = 1 ]; then
		cat >> init.c <<'EOF'
printf("Didn't find /etc/init.rc, skipping...\n");
EOF
	fi
	echo "		return 0;" >> init.c
	echo "	}" >> init.c
	echo "	char line[256];" >> init.c
	echo "	while (fgets(line, sizeof(line), fp)) {" >> init.c
	cat >> init.c <<'EOF'
        	line[strcspn(line, "\n")] = '\0';
        	if (line[0] == '\0' || line[0] == '#') continue;
EOF
	if [ "$VERBOSEMSG" = 1 ]; then
		echo '		printf("Init: Starting daemon/service (full arguments): %s\\n", line);' >> init.c
	fi
	echo "		pid_t pid = fork();" >> init.c
	echo "		if (pid == 0) {" >> init.c
	echo "			char *argv[256];" >> init.c
	echo "			int argc = 0;" >> init.c
	echo '			char *token = strtok(line, " ");' >> init.c
	echo "			while (token != NULL && argc < (sizeof(argv)/sizeof(argv[0]) - 1)) {" >> init.c
	echo "				argv[argc++] = token;" >> init.c
	echo '				token = strtok(NULL, " ");' >> init.c
	echo "			}" >> init.c
	echo "			argv[argc] = NULL;" >> init.c
	echo "			execvp(argv[0], argv);" >> init.c
	echo '			fprintf(stderr, "Init: Exec failed: %s!\\n", strerror(errno));' >> init.c
	echo "			exit(1);" >> init.c
	echo "		} else if (pid < 0) {" >> init.c
	echo '			fprintf(stderr, "Init: Fork failed: %s!\\n", strerror(errno));' >> init.c
	echo "		}" >> init.c
	echo "	}" >> init.c
	echo "	fclose(fp);" >> init.c
	echo "	return 0;" >> init.c
	echo "}" >> init.c
fi
echo "int main() {" >> init.c
printf '	printf("Init generated by SimpleInitGen.\\n");\n' >> init.c
if [ "$MOUNTDEV" = 1 ]; then
	if [ "$VERBOSEMSG" = 1 ]; then
		printf '	printf("Init: Mounting /dev...\\n");\n' >> init.c
	fi
	echo '	ret = mount("devtmpfs", "/dev", "devtmpfs", 0, NULL);' >> init.c
	echo '	if (ret != 0) {' >> init.c
	echo '		fprintf(stderr, "Init: Mounting failed: %s!\\n", strerror(errno));' >> init.c
	echo '	}' >> init.c
fi
if [ "$MOUNTPROC" = 1 ]; then
	if [ "$VERBOSEMSG" = 1 ]; then
		printf '	printf("Init: Mounting /proc...\\n");\n' >> init.c
	fi
	echo '	ret = mount("proc", "/proc", "proc", 0, NULL);' >> init.c
	echo '	if (ret != 0) {' >> init.c
	echo '		fprintf(stderr, "Init: Mounting failed: %s!\\n", strerror(errno));' >> init.c
	echo '	}' >> init.c
fi
if [ "$MOUNTSYS" = 1 ]; then
	if [ "$VERBOSEMSG" = 1 ]; then
		printf '	printf("Init: Mounting /sys...\\n");\n' >> init.c
	fi
	echo '	ret = mount("sysfs", "/sys", "sysfs", 0, NULL);' >> init.c
	echo '	if (ret != 0) {' >> init.c
	echo '		fprintf(stderr, "Init: Mounting failed: %s!\\n", strerror(errno));' >> init.c
	echo '	}' >> init.c
fi
if [ "$MOUNTTMP" = 1 ]; then
	if [ "$VERBOSEMSG" = 1 ]; then
		printf '	printf("Init: Mounting /tmp...\\n");\n' >> init.c
	fi
	echo '	ret = mount("tmpfs", "/tmp", "tmpfs", 0, NULL);' >> init.c
	echo '	if (ret != 0) {' >> init.c
	echo '		fprintf(stderr, "Init: Mounting failed: %s!\\n", strerror(errno));' >> init.c
	echo '	}' >> init.c
fi
if [ "$RUNDAS" = 1 ]; then
	echo "	run_services();" >> init.c
	echo "	sleep(2);" >> init.c
fi
if [ "$LAUNCHSHELL" = 1 ]; then
	if [ "$AUTOLAUNCH" = 1 ]; then
		if [ "$VERBOSEMSG" = 1 ]; then
			printf '	printf("Init: Launching shell...\\n");\n' >> init.c
		fi
		echo '	while(1) {' >> init.c
		echo "		pid_t pid = fork();" >> init.c
		echo "		if (pid == 0) {" >> init.c
		echo "			execl(\"$SHELLPATH\", \"$SHELLPATH\", NULL);" >> init.c
		echo "			_exit(1);" >> init.c
		echo "		} else if (pid > 0) {" >> init.c
		echo "			int status;" >> init.c
		echo "			waitpid(pid, &status, 0);" >> init.c
		if [ "$VERBOSEMSG" = 1 ]; then
			printf '			printf("Init: Shell exited, relaunching...\\n");\n' >> init.c
		fi
		echo "		} else {" >> init.c
		echo "			sleep(1);" >> init.c
		echo "		}" >> init.c
		echo '	}' >> init.c
	else
		if [ "$VERBOSEMSG" = 1 ]; then
			printf '	printf("Init: Launching shell...\\n");\n' >> init.c
		fi
		echo "	execl(\"$SHELLPATH\", \"sh\", NULL);" >> init.c
	fi
fi
echo "	return 0;" >> init.c
echo "}" >> init.c
echo "Created both Makefile and init.c! Run 'make' to compile."
